<%- include('../layouts/user/header.ejs') %>

    <style>
        body {
            background-color: #dacbf2;
        }

        .orders-page {
            max-width: 800px;
            margin: 3rem auto;
            padding: 20px;
            font-family: Arial, sans-serif;
            background-color: #cdbbe9;
            border-radius: 10px;
            border: 1px solid #21123b;
            box-shadow: 0 14px 16px rgba(22, 26, 255, 0.1);
        }

        .orders-header {
            text-align: center;
            font-size: 2rem;
            margin-bottom: 30px;
            color: #6e3bbb;
        }

        .orders-container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            justify-content: center;
            flex-direction: column;
        }

        .order-card {
            display: flex;
            align-items: center;
            background-color: #fff;
            border: 1px solid #d0b4ff;
            border-radius: 10px;
            margin: 20px;
            padding: 15px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            flex: 1 1 300px;
            /* Ensures responsive behavior */
        }

        .order-image {
            flex-shrink: 0;
            width: 150px;
            height: 150px;
            margin-right: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: #f9f4ff;
            border-radius: 10px;
        }

        .order-image img {
            max-width: 100%;
            max-height: 100%;
            border-radius: 5px;
        }

        .order-details {
            flex-grow: 1;
            flex-direction: row;
        }

        .order-details h3 {
            font-size: 1.2rem;
            font-weight: bold;
            color: #3e0a77;
            margin: 0;
        }

        .order-details p {
            font-size: 0.9rem;
            margin: 5px 0;
            color: #6e3bbb;
        }

        .actions {
            margin-top: 10px;
        }

        .actions button {
            background-color: #6e3bbb;
            color: #fff;
            padding: 8px 12px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-right: 10px;
        }

        .actions button.cancel {
            background-color: #c8aae9;
        }
    </style>

    <div class="orders-page">
        <h1 class="orders-header">Your Orders</h1>
        <% if (orders.length> 0) { %>
            <div class="orders-container">
                <% orders.forEach(order=> { %>
                    <div class="order-card">
                        <div class="order-image">
                            <img src="/img/products/<%= order.orderedItems[0].product.productImage[0] %>"
                                alt="<%= order.orderedItems[0].product.productName %>">
                        </div>
                        <div class="order-details">
                            <h3>
                                <%= order.orderedItems[0].product.productName %>
                            </h3>
                            <p>Payment Method: <%= order.paymentMethod %>
                            </p>
                            <p>Status: <span class="order-status">
                                    <%= order.status %>
                                </span></p>
                            <p>Payment Status: <span class="order-status">
                                    <%= order.paymentStatus %>
                                </span></p>
                            <div class="actions">
                                <button onclick="viewOrder('<%= order.orderId %>')">View</button>
                                <!-- <% if (order.status !=='Delivered' && order.status !=='Refund Completed' && order.status
                                    !=='Cancelled' ) { %>
                                    <button onclick="cancelOrder('<%= order.orderId %>')" class="cancel">Cancel
                                        Order</button>
                                    <% } %> -->
                                    <% if (order.status === 'Pending' || order.status === 'Processing') { %>
                                        <button onclick="cancelOrder('<%= order.orderId %>')" class="cancel">Cancel Order</button>
                                    <% } %>
                                    
                                        <% if (order.paymentStatus==='Failed' ) { %>
                                            <button
                                                onclick="retryPayment('<%= order.orderId %>', <%= parseFloat(order.finalAmount) %>)"
                                                class="cancel">
                                                Retry Payment
                                            </button>
                                            <% } %>
                                                <% if (order.status==="Delivered" ) { %>
                                                    <button class="return-btn"
                                                        data-orderid="<%= order.orderId %>">Return</button>
                                                    <% } %>
                            </div>
                        </div>
                    </div>
                    <% }) %>
            </div>
            <% } else { %>
                <p style="text-align: center; color: #130c1e; margin: 5rem;">No orders found.</p>
                <% } %>
    </div>
    <%- include('../layouts/user/footer.ejs') %>
        <script>
            function updateStatus(orderId) {
                const form = document.getElementById(`status-form-${orderId}`);
                const formData = new FormData(form);
                fetch('/admin/orderList/updateStatus', {
                    method: 'POST',
                    body: JSON.stringify(Object.fromEntries(formData)),
                    headers: { 'Content-Type': 'application/json' }
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                title: 'Success',
                                text: data.message,
                                icon: 'success',
                                confirmButtonText: 'OK'
                            });
                        } else {
                            Swal.fire({
                                title: 'Error',
                                text: data.message,
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            title: 'Error',
                            text: 'Something went wrong!',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    });
            } 
        </script>

        <script>
            function togglePaymentDetails(orderId) {
                const details = document.getElementById(`payment-${orderId}`);
                if (details.style.display === 'none') {

                    details.style.display = 'block';
                } else {
                    details.style.display = 'none';
                }
            }

            function retryPayment(orderId, finalAmount) {
    // Get Razorpay key directly from a global variable
    const razorpayIdKey = '<%= process.env.RAZORPAY_ID_KEY %>';
    
    // Convert and validate finalAmount
    finalAmount = Number(finalAmount);

    if (isNaN(finalAmount) || finalAmount <= 0) {
        Swal.fire({
            title: 'Error',
            text: 'Invalid amount',
            icon: 'error',
            timer: 3000,
        });
        return;
    }

    // Initiate fetch to create retry payment order
    fetch('/createRetryPaymentOrder', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        },
        body: JSON.stringify({
            orderId: orderId.toString(),
            finalAmount: parseFloat(finalAmount)
        }),
    })
    .then(res => res.json())
    .then(data => {
        if (!data.razorpayOrderId) {
            throw new Error('Missing payment gateway details');
        }

        const options = {
            key: razorpayIdKey,
            amount: Math.round(finalAmount * 100), // Convert to paise
            currency: 'INR',
            name: 'CyberCrate',
            description: 'Retry Order Payment',
            order_id: data.razorpayOrderId,
            handler: function (response) {
                console.log('respons',response);
                
                // Handle Razorpay payment success
                fetch('/retryPayment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({
                        orderId,
                        razorpay_order_id: response.razorpay_order_id,
                        razorpay_payment_id: response.razorpay_payment_id,
                        razorpay_signature: response.razorpay_signature,
                    }),
                })
                .then(res => res.json())
                
                .then(data => {
                    console.log(data,'iiiiiiiiiiiiiiiiii');
                    
                    if (data.success || data.status === 'success') {
                        Swal.fire({
                            title: 'Success',
                            text: data.message || 'Payment successful',
                            icon: 'success',
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        throw new Error(data.message || 'Payment failed');
                    }
                })
                .catch(error => {
                    Swal.fire({
                        title: 'Error',
                        text: error.message || 'Payment verification failed',
                        icon: 'error',
                    });
                });
            },
            theme: {
                color: '#3399cc',
            },
            modal: {
                ondismiss: function () {
                    console.log('Razorpay modal dismissed');
                }
            }
        };

        // Open Razorpay payment modal
        const rzp1 = new Razorpay(options);
        rzp1.open();

    })
    .catch(error => {
        Swal.fire({
            title: 'Error',
            text: error.message || 'Failed to initiate payment',
            icon: 'error',
        });
    });
}


            function viewOrder(orderId) {
                // window.location.href = `/orderDetails/${orderId}`;
                window.location.href = `/profile/orderDetails/${orderId}`;
            }
            function cancelOrder(orderId) {
    Swal.fire({
        title: "Are you sure?",
        text: "Do you really want to cancel this order?",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#3085d6",
        confirmButtonText: "Yes, cancel it!"
    }).then((result) => {
        if (result.isConfirmed) {
            fetch('/cancelOrder', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ orderId })
            })
                .then(response => {
                    // First check if the response is ok (status in 200-299 range)
                    if (!response.ok) {
                        return response.json().then(data => Promise.reject(data));
                    }
                    return response.json();
                })
                .then(data => {
                    Swal.fire({
                        title: "Cancelled!",
                        text: data.message,
                        icon: "success",
                        confirmButtonText: "OK"
                    }).then(() => {
                        location.reload();
                    });
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        title: "Error",
                        text: error.message || "An error occurred while cancelling the order.",
                        icon: "error",
                        confirmButtonText: "OK"
                    });
                });
        }
    });
}
            document.addEventListener("DOMContentLoaded", () => {
                document.querySelectorAll(".return-btn").forEach((button) => {
                    button.addEventListener("click", async () => {
                        const orderId = button.dataset.orderid;

                        Swal.fire({
                            title: "Are you sure?",
                            text: "Do you really want to return this order?",
                            icon: "warning",
                            showCancelButton: true,
                            confirmButtonColor: "#d33",
                            cancelButtonColor: "#3085d6",
                            confirmButtonText: "Yes, return it!"
                        }).then(async (result) => {
                            if (result.isConfirmed) {
                                try {
                                    const response = await fetch(`/orders/${orderId}/return`, {
                                        method: "PATCH",
                                        headers: { "Content-Type": "application/json" }
                                    });

                                    const data = await response.json();
                                    if (response.ok) {
                                        Swal.fire({
                                            title: "Success!",
                                            text: data.message,
                                            icon: "success",
                                            confirmButtonText: "OK"
                                        }).then(() => {
                                            location.reload();
                                        });
                                    } else {
                                        Swal.fire({
                                            title: "Error!",
                                            text: data.message,
                                            icon: "error",
                                            confirmButtonText: "OK"
                                        });
                                    }
                                } catch (error) {
                                    // console.error("Error submitting return request:", error) 
                                    Swal.fire({
                                        title: "Error!",
                                        text: "Something went wrong. Try again.",
                                        icon: "error",
                                        confirmButtonText: "OK"
                                    });
                                }
                            }
                        });
                    });
                });
            });

            
            function showToast(message, type) {
                const toast = document.createElement('div');
                toast.classList.add('toast', `toast--${type}`);
                toast.textContent = message;
                document.body.appendChild(toast);
                setTimeout(() => {
                    toast.remove();
                }, 3000);
            }

        </script>